// This file is auto-generated by the jankiest code evr!
#pragma once
#include <string>
#include <cereal/archives/json.hpp>
#include <cereal/types/vector.hpp>
#include "render_data.h"

namespace Saleae::Graph 
{
    template<class Archive>
    void serialize(Archive& archive,
                RenderRequestData& m)
    {
        archive( cereal::make_nvp("id", m.mId) );
        archive( cereal::make_nvp("widthPx", m.mWidthPx) );
        archive( cereal::make_nvp("leftEdgeTime", m.mLeftEdgeTime) );
        archive( cereal::make_nvp("secondsPerPx", m.mSecondsPerPx) );
    }
    template<class Archive>
    void serialize(Archive& archive,
                Vec2& m)
    {
        archive( cereal::make_nvp("x", m.mX) );
        archive( cereal::make_nvp("y", m.mY) );
    }
    template<class Archive>
    void serialize(Archive& archive,
                Line& m)
    {
        archive( cereal::make_nvp("from", m.mFrom) );
        archive( cereal::make_nvp("to", m.mTo) );
    }
    template<class Archive>
    void serialize(Archive& archive,
                RenderResponseData& m)
    {
        archive( cereal::make_nvp("id", m.mId) );
        archive( cereal::make_nvp("valueSet", m.mValueSet) );
        archive( cereal::make_nvp("lines", m.mLines) );
        archive( cereal::make_nvp("lineStrip", m.mLineStrip) );
    }
    template<class Archive>
    void serialize(Archive& archive,
                RenderResponseData::ValueSet& m)
    {
        archive( cereal::make_nvp("values", m.mValues) );
        archive( cereal::make_nvp("firstSampleTime", m.mFirstSampleTime) );
        archive( cereal::make_nvp("sampleRate", m.mSampleRate) );
    }
}

// This file is auto-generated by the jankiest code evr!
#include "server.gen.h"


namespace Api 
{
    std::string ParseMessageForGraphServer( GraphServer& target, std::string message )
    {
        std::stringstream ss (message);
        cereal::JSONInputArchive archive( ss );
        std::string function;
        archive( CEREAL_NVP( function ) );
        if( function == "AddNode" ) {
            std::string node_type;
            archive( cereal::make_nvp("nodeType", node_type) );

            auto result = target.AddNode(
                node_type
            );
        } else if( function == "RemoveNode" ) {
            int node_id;
            archive( cereal::make_nvp("nodeId", node_id) );

            target.RemoveNode(
                node_id
            );
        } else if( function == "ConnectPipe" ) {
            int from_node_id;
            std::string from_port;
            int from_port_index;
            int to_node_id;
            std::string to_port;
            int to_port_index;
            archive( cereal::make_nvp("fromNodeId", from_node_id) );
            archive( cereal::make_nvp("fromPort", from_port) );
            archive( cereal::make_nvp("fromPortIndex", from_port_index) );
            archive( cereal::make_nvp("toNodeId", to_node_id) );
            archive( cereal::make_nvp("toPort", to_port) );
            archive( cereal::make_nvp("toPortIndex", to_port_index) );

            auto result = target.ConnectPipe(
                from_node_id,
                from_port,
                from_port_index,
                to_node_id,
                to_port,
                to_port_index
            );
        } else if( function == "DisconnectPipe" ) {
            int pipe_id;
            archive( cereal::make_nvp("pipeId", pipe_id) );

            target.DisconnectPipe(
                pipe_id
            );
        } else if( function == "ConnectApi" ) {
            int producer_node_id;
            int consumer_node_id;
            archive( cereal::make_nvp("producerNodeId", producer_node_id) );
            archive( cereal::make_nvp("consumerNodeId", consumer_node_id) );

            auto result = target.ConnectApi(
                producer_node_id,
                consumer_node_id
            );
        } else if( function == "DisconnectApi" ) {
            int api_id;
            archive( cereal::make_nvp("apiId", api_id) );

            target.DisconnectApi(
                api_id
            );
        } else if( function == "PushToPipe" ) {
            int node_id;
            std::string port;
            int port_id;
            std::string data;
            archive( cereal::make_nvp("nodeId", node_id) );
            archive( cereal::make_nvp("port", port) );
            archive( cereal::make_nvp("portId", port_id) );
            archive( cereal::make_nvp("data", data) );

            target.PushToPipe(
                node_id,
                port,
                port_id,
                data
            );
        } else if( function == "SubscribeToPipe" ) {
            int node_id;
            std::string port;
            int port_id;
            archive( cereal::make_nvp("nodeId", node_id) );
            archive( cereal::make_nvp("port", port) );
            archive( cereal::make_nvp("portId", port_id) );

            auto result = target.SubscribeToPipe(
                node_id,
                port,
                port_id
            );
        } else if( function == "UnsubscribeToPipe" ) {
            int pipe_subscription_id;
            archive( cereal::make_nvp("pipeSubscriptionId", pipe_subscription_id) );

            target.UnsubscribeToPipe(
                pipe_subscription_id
            );
        } else if( function == "DispatchAction" ) {
            int node_id;
            std::string action;
            archive( cereal::make_nvp("nodeId", node_id) );
            archive( cereal::make_nvp("action", action) );

            auto result = target.DispatchAction(
                node_id,
                action
            );
        } else if( function == "GetNodeState" ) {
            int node_id;
            archive( cereal::make_nvp("nodeId", node_id) );

            auto result = target.GetNodeState(
                node_id
            );
        } else if( function == "SubscribeToNodeState" ) {
            int node_id;
            archive( cereal::make_nvp("nodeId", node_id) );

            auto result = target.SubscribeToNodeState(
                node_id
            );
        } else if( function == "UnsubscribeToNodeState" ) {
            int state_subscription_id;
            archive( cereal::make_nvp("stateSubscriptionId", state_subscription_id) );

            target.UnsubscribeToNodeState(
                state_subscription_id
            );
        }
        return "";
    }
}

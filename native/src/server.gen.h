// This file is auto-generated by the jankiest code evr!

#include <string>
#include "server.h"

void ParseMessage( std::string message )
{
    cereal::JSONInputArchive archive( message );
    std::string function;
    archive( cereal::make_nvp( "function", function ) );

    if( function == "AddNode" ) {
        std::string node_type;
        archive( CEREAL_NVP( node_type ) );

        auto result = AddNode(
            node_type
        );
    } else if( function == "RemoveNode" ) {
        int node_id;
        archive( CEREAL_NVP( node_id ) );

        auto result = RemoveNode(
            node_id
        );
    } else if( function == "ConnectPipe" ) {
        int from_node_id;
        std::string from_port;
        int from_port_index;
        int to_node_id;
        std::string to_port;
        int to_port_index;
        archive( CEREAL_NVP( from_node_id ) );
        archive( CEREAL_NVP( from_port ) );
        archive( CEREAL_NVP( from_port_index ) );
        archive( CEREAL_NVP( to_node_id ) );
        archive( CEREAL_NVP( to_port ) );
        archive( CEREAL_NVP( to_port_index ) );

        auto result = ConnectPipe(
            from_node_id,
            from_port,
            from_port_index,
            to_node_id,
            to_port,
            to_port_index
        );
    } else if( function == "DisconnectPipe" ) {
        int pipe_id;
        archive( CEREAL_NVP( pipe_id ) );

        auto result = DisconnectPipe(
            pipe_id
        );
    } else if( function == "ConnectApi" ) {
        int producer_node_id;
        int consumer_node_id;
        archive( CEREAL_NVP( producer_node_id ) );
        archive( CEREAL_NVP( consumer_node_id ) );

        auto result = ConnectApi(
            producer_node_id,
            consumer_node_id
        );
    } else if( function == "DisconnectApi" ) {
        int api_id;
        archive( CEREAL_NVP( api_id ) );

        auto result = DisconnectApi(
            api_id
        );
    } else if( function == "PushToPipe" ) {
        int node_id;
        std::string port;
        int port_id;
        std::string data;
        archive( CEREAL_NVP( node_id ) );
        archive( CEREAL_NVP( port ) );
        archive( CEREAL_NVP( port_id ) );
        archive( CEREAL_NVP( data ) );

        auto result = PushToPipe(
            node_id,
            port,
            port_id,
            data
        );
    } else if( function == "SubscribeToPipe" ) {
        int node_id;
        std::string port;
        int port_id;
        archive( CEREAL_NVP( node_id ) );
        archive( CEREAL_NVP( port ) );
        archive( CEREAL_NVP( port_id ) );

        auto result = SubscribeToPipe(
            node_id,
            port,
            port_id
        );
    } else if( function == "UnsubscribeToPipe" ) {
        int pipe_subscription_id;
        archive( CEREAL_NVP( pipe_subscription_id ) );

        auto result = UnsubscribeToPipe(
            pipe_subscription_id
        );
    } else if( function == "DispatchAction" ) {
        int node_id;
        std::string action;
        archive( CEREAL_NVP( node_id ) );
        archive( CEREAL_NVP( action ) );

        auto result = DispatchAction(
            node_id,
            action
        );
    } else if( function == "GetNodeState" ) {
        int node_id;
        archive( CEREAL_NVP( node_id ) );

        auto result = GetNodeState(
            node_id
        );
    } else if( function == "SubscribeToNodeState" ) {
        int node_id;
        archive( CEREAL_NVP( node_id ) );

        auto result = SubscribeToNodeState(
            node_id
        );
    } else if( function == "UnsubscribeToNodeState" ) {
        int state_subscription_id;
        archive( CEREAL_NVP( state_subscription_id ) );

        auto result = UnsubscribeToNodeState(
            state_subscription_id
        );
}